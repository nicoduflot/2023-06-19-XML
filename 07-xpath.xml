<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<repertoire xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="07-xpath.xsd">
    <!-- Amélia EARHART -->
    <personne type="physique">
        <nom>EARHART</nom>
        <prenom>Amélia</prenom>
        <adresse>
            <numero>28</numero>
            <voie type="avenue">avenue de la république</voie>
            <codePostal>66002</codePostal>
            <ville>Atchinson</ville>
            <pays>USA</pays>
        </adresse>
        <telephones>
            <telephone type="bureau">04 05 06 07 08</telephone>
            <telephone type="professionnel">04 05 06 07 08</telephone>
        </telephones>
        <emails>
            <email type="professionnel">aearhart@flytogether.com</email>
        </emails>
    </personne>
    <!-- John WALKER -->
    <personne type="physique">
        <nom>WALKER</nom>
        <prenom>John</prenom>
        <adresse>
            <numero>7</numero>
            <voie type="impasse">impasse du chemin</voie>
            <codePostal>75015</codePostal>
            <ville>PARIS</ville>
            <pays>FRANCE</pays>
        </adresse>
        <telephones>
            <telephone type="fixe">01 02 03 04 05</telephone>
            <telephone type="portable">06 07 08 09 10</telephone>
        </telephones>
        <emails>
            <email type="personnel">john.walker@wanadoo.fr</email>
            <email type="professionnel">john.walker@texas-ranger.com</email>
        </emails>
    </personne>
    <!-- ACME Inc. -->
    <personne type="morale">
        <nom>ACME Inc.</nom>
        <adresse>
            <numero>7</numero>
            <voie type="impasse">impasse du chemin</voie>
            <codePostal>75015</codePostal>
            <ville>PARIS</ville>
            <pays>FRANCE</pays>
        </adresse>
        <telephones>
            <telephone type="fixe">01 02 03 04 05</telephone>
            <telephone type="portable">06 07 08 09 10</telephone>
        </telephones>
        <emails>
            <email type="personnel">john.walker@wanadoo.fr</email>
            <email type="professionnel">john.walker@texas-ranger.com</email>
        </emails>
    </personne>
</repertoire>
<!-- XPATH -->
<!-- 
    Chemins absolus et relatifs

    Absolu

    on part de la racine vers un élément du document (xml, html)
    ici /repertoire est le départ (la racine) du chemin xpath en absolu
    Si je veus récupérer toutes les balises téléphone avec l'attribut type="fixe"
    
    racine répertoire
        noeud enfant personne
            noeud enfant telephones
                noeuds enfants telephone avec type="fixe"
    
    /repertoire/personne/telephones/telephone type="fixe"

    Relatif

    on ne part pas de la racine mais d'un élément (noeud) déterminé, et en empruntant des axes, on récupère les informations selon des directive précises

    retrouver les noms des personnes ayany un numéro de téléphone avec type="portable"

    noeud telephone type="portable"
        remonter au noeud parent telephones
            aller sur le noeud frère nom

    telephone type="portable" => axe noeud parent = noeud frère nom

    On localise alors les données par :
        - un axe (la direction d'un endroit vers un autre, vers les ancètres, les descendant ou les frères et soeurs)
        - un noeud ciblé
        - facultatif : un ou plusieurs prédicats => des condition sur le noeud ciblé / parcourus
            - les attributs (présence, non présence + valeur donnée ou liste de valeurs données )
            - la position (nième, le premier, le dernier, etc.)
    
    axe::noeud[predicat][predicat]...[predicat]/axe::noeud[predicat][predicat]...[predicat]

    exemple de chemin absolu

    depuis le xml repertoire, repérer en chemin absolu le pays où vivent les personnes

    1 noeud répertoire
    2 noeud personne
    3 noeud adresse
    4 noeud pays

    chaque etape en xpath

    1 child::repertoire
    2 child::personne
    3 child::adresse
    4 child::pays

    le chemine complet 
    /child::repertoire/child::personne/child::adresse/child::pays

    child étant la direction par défaut de xpath on peut alors écrire

    /repertoire/personne/adresse/pays

    depuis la racine, repérer tous les commentaires des noeuds descendants

    /descendant::comment()
    /descendant::text()

    exemple de chemin relatif

    depuiq telephones, repérer le pays indiqué dans adresse
    1 remonter au noeud frère adresse
    2 descendre dans le noeud enfant pays

    telephones/preceding-sibling::adresse/pays

    Abreviations

    /descendant-or-self::node()/  => //
    /descendant-or-self::node()/telephone  => //telephone

    self::node()  => .


    /repertoire/personne/adresse/self::node()
    => récupère adresse et les types de noeuds dans adresse

    /repertoire/personne/adresse/.

    vers un noeud parent en chemin relatif

    parent::node() => ..
    parent::node()/nom => ../nom

    Prédicats

    //telephone[attribute::type="fixe"]

    tous les téléphones type="professionnel" du répertoire

    mauvaise méthode pour les prédicats
    //*[attribute::type="professionnel"]
    => effet de bord car email et telephone ont un atribut type pouvant être = à professionnel

    Bonne méthode
    /descendant::telephone[attribute::type="professionnel"]

    tous les télphone non professionnel
    /descendant::telephone[attribute::type!="professionnel"]

    ! est le non d'une égalité (différent)

    /descendant::telephone[not(attribute::type="professionnel")]

    tous les télphone non professionnel et non bureau
    /descendant::telephone[attribute::type!="professionnel"][attribute::type!="bureau"]
    /descendant::telephone[not(attribute::type="professionnel")][not(attribute::type="bureau")]

    dernier élément téléphone

    /descendant::telephone[last()]

    position() => la position (de 1 à x) des éléments dans la liste xpath
    last() le dernier élément de la liste
    les balises telephone dont la position est strictement inférieure à la valeur de 
    la position de la dernière balise de la liste
    /descendant::telephone[position() < last()]

    Position : premier élément telephone
    /descendant::telephone[position() = 1]
    
    compter tous les éléments d'un xml

    count(//*) compte tous les noeuds du xml
    count(//text()) compte tous les noeuds texte du xml
    count(//comment()) compte tous les noeuds commentaires du xml
    count(//telephone) compte tous les noeuds telephone du xml

    count(/descendant::telephone[last()]) compte tous les noeud qui sont "le dernier noeud telephone" 0 (s'il n'y en a pas) ou 1

    Abreviation
    les attributs peuvent être abrégé avec de attribute:: à @

    /descendant::telephone[attribute::type!="professionnel"][attribute::type!="bureau"]
    
    /descendant::telephone[@type!="professionnel"][@type!="bureau"]

    //telephone[@type!="professionnel"][@type!="bureau"]

    
-->