<html:html 
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:mml="http://www.w3.org/1998/Math/MathML"
    >
    <html:head>
        <html:title>Espaces de noms</html:title>
    </html:head>
    <html:body>
        ...
        <mml:math>
            <mml:apply>
                <mml:eq>
                    ....
                </mml:eq>
            </mml:apply>
        </mml:math>
    </html:body>
</html:html>

<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Espaces de noms</title>
    </head>
    <body>
        ...
        <math xmlns="http://www.w3.org/1998/Math/MathML">
            <apply>
                <eq>
                    ....
                </eq>
            </apply>
        </math>
    </body>
</html>

<html xmlns="http://www.w3.org/1999/xhtml">
    <!-- L'espace de nom réfère maintenant au vocabulaire XHTML -->
    <head>
        <title>Espaces de noms</title>
    </head>
    <body>
        ...
        <name xmlns="">
        <!-- 
            en déclarant l'attribut xmlns pour la balise name à 'vide' name et les balises qu'il contient ne se réfèreront plus au vocabulaire XHTML 
        -->
            <firstName>Gaston</firstName>
            <lastName>Lagaffe</lastName>
        </name>
    </body>
</html>

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE list SYSTEM "valide.dtd">
<tns:list xmlns:tns="http://www.omega-one.org/~carton/">
    <tns:item>Item 1</tns:item>
    <tns:item>Item 2</tns:item>
</tns:list>

<!-- valide.dtd -->
<!ELEMENT tns:list (tns:item+) >
<!ATTLIST tns:list xlmns:tns CDATA #REQUIRED>
    <!ELEMENT tns:item (#PCDATA)>

<!-- 
XML
    http://www.w3.org/XML/1998/namespace 
XInclude
    http://www.w3.org/2001/XInclude 
XLink
    http://www.w3.org/1999/xlink 
MathML
    http://www.w3.org/1998/Math/MathML 
XHTML
    http://www.w3.org/1999/xhtml 
SVG
    http://www.w3.org/2000/svg 
Schémas
    http://www.w3.org/2001/XMLSchema 
Instances de schémas
    http://www.w3.org/2001/XMLSchema-instance 
Schematron
    http://purl.oclc.org/dsdl/schematron 
XSLT
    http://www.w3.org/1999/XSL/Transform 
XSL-FO
    http://www.w3.org/1999/XSL/Format 
DocBook
    http://docbook.org/ns/docbook 
Dublin Core
    http://purl.org/dc/elements/1.1/ 


-->

<!-- 
    Les DTD  
    Document Type Definition
-->
<!-- Syntaxe -->
<!ELEMENT balise (contenu)>
<contact>
    <nom>Durand</nom>
</contact>
<!-- balise contenant une autre balise -->
<!ELEMENT contact (nom)>
<!-- pour la balise nom -->
<!ELEMENT nom (#PCDATA)>
<!-- si la balise est vide de données -->
<!ELEMENT nom EMPTY>
<!-- exemple -->
<console src="test" />
<!ELEMENT console EMPTY>
    <!ATTLIST console src CDATA>
<!-- Si la balise peut contenir des données ou non -->
<!ELEMENT nom ANY>
<!-- Pour le xml suivant : -->
<rolodex>
    <contact>
        <nom>Durand</nom>
        <prenom>Jean</prenom>
        <age>42</age>
    </contact>
    <contact>
        <nom>ACME Inc.</nom>
        <prenom></prenom>
        <age></age>
    </contact>
</rolodex>

<!ELEMENT rolodex (contact+)>
    <!ELEMENT contact (nom, prenom, age)>
        <!ELEMENT nom (#PCDATA)>
        <!ELEMENT prenom (#PCDATA)>
        <!ELEMENT age (#PCDATA)>

<!-- IL est possible d'avoir plusieurs contenus possible dans une balise, avec une liste de choix -->

<!ELEMENT rolodex (contact+)>
    <!ELEMENT contact (nom | prenom, age)>
        <!-- ici le xml doit avoir obligatoirement soit nom soit prénom et age -->
        <!ELEMENT nom (#PCDATA)>
        <!ELEMENT prenom (#PCDATA)>
        <!ELEMENT age (#PCDATA)>

<!-- Balises optionnelles -->
<!ELEMENT contact (nom, prenom?, adresses, emails)>
<!-- contact doit contenir une balise nom, peut ou non contenir une balise prenom, et doit contenir une balise adresses etemails -->

<!-- Balises opitionnelles répétées -->
<!ELEMENT adresses (adresse*)>
<!-- mon élément adresses peut contenir 0 ou plusieurs élément adresse -->
<!-- Balises obligatoires répétées-->
<!ELEMENT rolodex (contact+)>
<!-- L'élément rolodex doit contenir au moins un ou plus d'élément contact -->

<!-- Les attributs -->
<!ELEMENT balise (contenu)>
    <!ATTLIST balise attr >

<!-- Identifiant unique -->
<!ATTLIST contact numero ID #REQUIRED>
<!-- Balise contact possède un attribut ID qui doit être unique et obligatoire -->
<contact numero="n1"></contact>
<!-- 
    propriété de présence des attributs 
    Forme                   Signification
    #IMPLIED                Attribut Facultatif
    #REQUIRED               Attribut obligatoire
    #FIXED "valeur"         Attribut avec cette valeur, non modifiable
    "valeur"                Attribut a cette valeur par défaut et elle est modifible
-->

<!-- Attribut ayant pour référence (qui fait référence à) un attribut à valeur unique -->
<contact personne="physique" numero="n1"></contact>
    <!ATTLIST contact numero ID #REQUIRED>

<adresse userAdresse="n1"></adresse>
    <!ATTLIST adresse userAdresse IDREF #REQUIRED>

<!-- attribut avec une valeur par défaut -->
<!ATTLIST contact personne (physique | morale) "physique" >
<!-- valide -->
<contact personne="physique"></contact>
<!-- valide -->
<contact personne="morale"></contact>
<!-- invalide -->
<contact personne="toto"></contact>
<!-- valide mais par défaut considéré comme physique -->
<contact personne=""></contact>

<!-- 
    les constantes : si un attribut est présent dans la balise, il doit avoir la valeur définie.
    mais si l'attribut n'est pas présent, il aura par défaut la valeur de la constante
-->

<!ATTLIST prix devise CDATA "euro">
<prix devise="euro">12</prix>
<prix>12</prix>
<!-- ici la devise sera euro et rien d'autre -->

<prix devise="USD">12</prix> <!-- invalide -->

<!-- 
    Les entités 
    se sont des alias qui permettent de réutiliser des informations dans le document xml ou dans les DTD
        - générales
        - paramètres
        - externes
-->

<!-- 
    entité générale 
    associe une alias a une information dans le document
-->

<!ENTITY dacia "Dacia">
<!ENTITY renault "Renault">
<!ENTITY citroen "Citroën">

<voiture>
    <marque>&dacia</marque>
</voiture>
<voiture>
    <marque>&renault</marque>
</voiture>
<voiture>
    <marque>&citroen</marque>
</voiture>

<!-- le xml sera lu en équivalent -->
<voiture>
    <marque>Dacia</marque>
</voiture>
<voiture>
    <marque>Renault</marque>
</voiture>
<voiture>
    <marque>Citroën</marque>
</voiture>

<!-- 
    entité paramètre 
    N'apparaissent que dans les DTD
    Elles associent un alias à une partie de la déclaration dans les DTD
-->
<voiture marque="Dacia" />
<voiture marque="Renault" />
<voiture marque="Citroën" />
<!-- pour l'attribut marque -->
<!ATTLIST voiture marque (Dacia|Renault|Citroën) #REQUIRED>

<!-- Avec les entités -->
<!ENTITY % listeMarques "marque (Dacia|Renault|Citroën) #REQUIRED">
<!ATTLIST voiture %listeMarques>

<!-- 
    Entité externe 
    Permetttent de faire référence, comme les entités générales, à des informations a utiliser dans le document 
    xml, mais elle sont écrites et déclarées dans un fichier externe
-->

<!ENTITY dacia SYSTEM "dacia.xml">
<!ENTITY renault SYSTEM "renault.xml">
<!ENTITY citroen SYSTEM "citroen.xml">

<!-- voitures.xml -->
<voiture>
    &dacia
</voiture>
<voiture>
    &renault
</voiture>
<voiture>
    &citroen
</voiture>

<!-- dacia.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE marque[
    <!ELEMENT marque (#PCDATA)>
]>
<marque>Dacia</marque>

<!-- 
    Les Schémas XML (XSD) 
    Pourquoi ? 
    les DTD ne sont pas au format XML, c'est un nouveau langage avec sa propre syntaxe et ses règles.
    => il faut l'utiliser avec xml et il se peut que certaines API liront le XML et les DTD de façons différentes?
    Enfin, on ne peut pas typer les données, on indique juste qu'une balise contient ou non des données mais impossible de préciser si c'est une chaîne de caractère, un nombre, etc.
    
    Le xsd permet de typer les donnée, il est plus précis sur l'écriture des contraintes, il s'écrit en xml, 
    se stocke dans un fichier externe ayant l'extension .xsd, il utilise comme les fichiers xml un prologue 
    dont le nom de l'élément racine nous est imposé
-->

<!-- prologue d'un fichier .xsd -->
<?xml version="1.0" encoding="UTF-8"?>
<!-- élément racine -->
<xsd:schema xmlns="http://www.w3.org/2001/XMLSchema">
</xsd:schema>

<!-- on déclare un espace de nom avec xmlns:xsd, de fait, tous les éléments du xsd seront préfixés par xsd: -->

<!-- 
    il faut ensuite rattacher ce fichier de schéma au xml concerné par le xsd
    il faut déclarer l'attachement du fichier dans la balise racine du xml
    mais pour appeler ce fichier il faut utiliser le vocabulaire schema-instance


-->

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<agenda xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:Contact test.xsd" xsi:schemaLocation="urn:Voiture testVoiture.xsd">
    <!-- schemaLocation déclare un xsd décrivant un espace de nom -->
    <Contact:rolodex xmlns:Contact="urn:Contact">
        <Contact:nom>
            Durant
        </Contact:nom>²²²
    </Contact:rolodex>
    <Voiture:garage xmlns:Voiture="urn:Voiture">
        <Voiture:voiture>
            <Voiture:marque>
                Opel
            </Voiture:marque>
        </Voiture:voiture>
    </Voiture:garage>
</agenda>

<!-- xsd ne décrivant pas d'espace de nom -->
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<agenda xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="test-et-testVoiture.xsd">
    <!-- schemaLocation déclare un xsd ne décrivant pas un espace de nom -->
    <rolodex>
        <nom>
            Durant
        </nom>
    </rolodex>
    <garage>
        <voiture>
            <marque>
                Opel
            </marque>
        </voiture>
    </garage>
</agenda>

<!--
    Déclarations d'éléments
    Éléments simples : un élément qui ne contient qu'une valeur dont le type est dit simple, il ne contient pas d'autres éléments

    une balise sans attribut, un attribut est un élément simple si le type de donnée qu'il contient est simple
-->
<!-- Ni attribut, ni aucun autre élément et donnée de type simple => élément simple -->
<nom>Duflot</nom>

<!-- Contient un attribut => élément complexe -->
<!-- l'attribut type est lui un élément simple -->
<personne type="physique">Nicolas Duflot</personne>

<!-- Élément complexe (contient d'autres balises) -->
<personne>
    <!-- Élement complexe (contient un attribut)-->
    <nom type="usage">Duflot</nom>
    <!-- Élement complexe (contient un attribut)-->
    <nom type="jeune-fille">Duflot</nom>
    <!-- Élement simple ( ne contient ni attribut ni d'autres balises )-->
    <prenom>Tiphaine</prenom>
</personne>

<!-- 
    Déclarer une balise en élément simple 
    mot clef : element sans oublier le namespace xsd:
-->
<nom>Duflot</nom>
<prenom>Nicolas</prenom>
<age>43</age>

<!-- en xsd -->
<xsd:element name="nom" type="xsd:string" />
<xsd:element name="prenom" type="xsd:string" />
<xsd:element name="age" type="xsd:int" />

<!-- valeurs parr défaut -->
<xsd:element name="nom" type="xsd:string" default="Doe" />
<xsd:element name="prenom" type="xsd:string" default="John" />
<xsd:element name="age" type="xsd:int" />
<!-- des exemples de xml valides avec ce schéma -->
<!-- ex 1 -->
<nom>Duflot</nom>
<prenom>Nicolas</prenom>
<age>43</age>
<!-- ex 2 -->
<nom></nom><!-- valeur par défaut "Doe"-->
<prenom>Nicolas</prenom>
<age>43</age>
<!-- ex 3 -->
<nom>Duflot</nom>
<prenom></prenom><!-- valeur par défaut "john"-->
<age>43</age>
<!-- ex 4 -->
<nom>Duflot</nom>
<prenom>Nicolas</prenom>
<age></age> <!-- il n'y a pas de valeur par défaut pour l'age mais il n'est pas obligatoire -->

<!-- 
    valeurs contantes 
    valeur inchangeable, imposée et non valide si la balise est vide
-->
<xsd:element name="status" type="xsd:string" fixed="Employé·e" />
<!-- valide -->
<status>Employé·e</status>
<!-- invalide car valeur !== Employé·e -->
<status>Junior</status>
<!-- invalide parce que value === '' -->
<status></status>

<!-- 
    Les attributs  
    
    Les attributs sont donc par essence des éléments simple, mais pour les déclarer 
    nous n’utilisons pas le mot-clef element mais le mot clef attribute, 
    qui sera évidemment précédé du namespace xsd:
    
    La déclaration d’un attribut possède deux attributs, nom et type (name & type)
-->

<!-- Déclaration de l'attribut personne de la balise suivante -->
<personne type="physique"></personne>

<xsd:attribute name="type" type="xsd:string" />
<!-- mais personne est un élément complexe, nous verrons sa déclaration un peu plus tard -->

<!-- Valeurs par défaut, obligatoire et inchangeables -->
<!-- par défaut -->
<xsd:attribute name="type" type="xsd:string" default="physique" />
<!-- Constante -->
<xsd:attribute name="devise" type="xsd:string" fixed="euro" />
<!-- valide -->
<prix devise="euro">23.5</prix>
<!-- valide -->
<prix devise="">23.5</prix>

<!-- l'attribut type de personne doit être présent dans la balise -->
<xsd:attribute name="type" type="xsd:string" use="required" />
<!-- valide -->
<personne type="physique"></personne>
<!-- invalide -->
<personne type=""></personne>

<!-- les types de valeur pour les éléments et les attributs -->
<!-- string -->
<xsd:element name="string" type="xsd:string" />
<string>Karamasov</string>
<string>Une phrase choc</string>
<string>&amp;</string>

<!-- language -->
<xsd:element name="langue" type="xsd:language" />
<langue>fr-CA</langue>
<langue>fr-FR</langue>
<langue>en</langue>
<langue>en-US</langue>
<langue>en-GB</langue>
<langue>en-CA</langue>

<!-- nmtoken -->
<xsd:attribute name="myToken" type="xsd:NMTOKEN" />
<balise myToken="A:1_B-3.2">Contenu de la balise</balise>

<!-- nmtokens -->
<xsd:attribute name="myTokens" type="xsd:NMTOKENS" />
<balise myToken="A:1_B-3.2 AZERTY 123456">Contenu de la balise</balise>

<!-- ID IDREF -->
<xsd:attribute name="num" type="ID" />
<xsd:attribute name="enfant" type="IDREF" />
<personne num="P1">Paul</personne>
<personne num="P2">JP</personne>
<personne num="P3" enfant="P1">Martin</personne>
<personne num="P4" enfant="P2">Camille</personne>

<!-- ID IDREFS -->
<xsd:attribute name="num" type="ID" />
<xsd:attribute name="enfant" type="IDREFS" />
<personne num="P0" enfant="">Clotaire</personne>
<personne num="P1" enfant="P0">Paul</personne>
<personne num="P2" enfant="">JP</personne>
<personne num="P3" enfant="">Marie</personne>
<personne num="P4" enfant="P0">Astrid</personne>
<personne num="P5" enfant="P1 P3">Martin</personne>
<personne num="P6" enfant="P2 P4">Camille</personne>

<!-- ENTITY -->
<xsd:attribute name="marque" type="xsd:ENTITY" />
<!ENTITY samsung "Samsung">
<!ENTITY apple "Apple">
<telephone marque="apple">iphone</telephone>
<telephone marque="samsung">Galaxy SII</telephone>

<!-- ENTITIES -->
<xsd:attribute name="marque" type="xsd:ENTITIES" />
<!ENTITY samsung "Samsung">
<!ENTITY apple "Apple">
<telephone marque="apple samsung"></telephone>

<!-- les éléments et les types complexes -->
<!-- personne :  élément complexe -->
<personne>
    <!-- élément simple -->
    <nom>Robert</nom>
    <!-- élément simple -->
    <prenom>Axel</prenom>
</personne>
<!-- élément complexe car contient un attribut -->
<personne type="physique">Axel Robert</personne>

<personne attr="test">
    <!-- contient d'autres balises -->
</personne>
<xsd:element name="personne">
    <xsd:complexType>
        <!-- les autres balises et éléments (les attributs par exemple )de la balise personne -->
    </xsd:complexType>
</xsd:element>

<!-- 
    éléments complexes avec du contenus simple
-->
<prix devise="euro">35</prix>
<voiture marque="Renault" moteur="Essence">Clio</voiture>

<!-- élément prix -->
<xsd:element name="prix">
    <!-- indiquer qu'il s'agit d'un élément complexe -->
    <xsd:complexType>
        <!-- préciser que son contenu est simple -->
        <xsd:simpleContent>
            <!-- on déclare le contenu simple de la balise, avec une extension -->
            <xsd:extension base="xsd:positiveInteger">
                <!-- déclaration de l'attribut devise de la balise prix -->
                <xsd:attribute name="devise" type="xsd:string"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>
</xsd:element>

<!-- élément voiture -->
<xsd:element name="voiture">
    <xsd:complexType>
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="marque" type="xsd:string"/>
                <xsd:attribute name="moteur" type="xsd:string"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>
</xsd:element>

<!-- balise contenant d'autres balises -->
<personne type="physique">
    <nom>Robert</nom>
    <prenom>Axel</prenom>
</personne>

<xsd:element name="personne">
    <xsd:complexType>
        <xsd:sequence>
            <xsd:element name="nom" type="xsd:string"/>
            <xsd:element name="prenom" type="xsd:string"/>
        </xsd:sequence>
        <xsd:attribute name="type" type="string"/>
    </xsd:complexType>
</xsd:element>

<!-- ATTENTION, séquence valide les balise déclarée dans l'odre de déclaration -->
<personne type="physique">
    <prenom>Axel</prenom>
    <nom>Robert</nom>
</personne>

<!-- pour que l'ordre das balises dans le xml n'ai pas d'importance, on utilise all au lieu de séquance -->
<xsd:element name="personne">
    <xsd:complexType>
        <xsd:all>
            <xsd:element name="nom" type="xsd:string"/>
            <xsd:element name="prenom" type="xsd:string"/>
        </xsd:all>
        <xsd:attribute name="type" type="string"/>
    </xsd:complexType>
</xsd:element>

<!-- 
     les balises déclarées dans le xsd peuvent ne pas être toutes présentes, 
     le contenu est préparé par une liste prédéfinie
-->
<personne type="physique">
    <prenom>Axel</prenom>
    <nom>Robert</nom>
</personne>
<personne type="morale">
    <nom>GloboCorp Inc.</nom>
</personne>
<personne type="physique">
    <prenom>Jéjé</prenom>
</personne>
<personne type="physique"></personne>

<!-- avec les mots clef choice, il est possible de déclarer des balise facultatives -->
<xsd:element name="personne">
    <xsd:complexType>
        <xsd:choice>
            <xsd:element name="nom" type="xsd:string"/>
            <xsd:element name="prenom" type="xsd:string"/>
        </xsd:choice>
        <xsd:attribute name="type" type="string"/>
    </xsd:complexType>
</xsd:element>

<!-- un type complexe dans un type complexe -->
<personne>
    <identite>
        <nom>VANCE</nom>
        <prenom>Jack</prenom>
    </identite>
</personne>

<xsd:element name="personne">
    <xsd:complexType>
        <xsd:sequence>
            <xsd:element name="identite">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="nom" type="xsd:string" />
                        <xsd:element name="prenom" type="xsd:string" />
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
</xsd:element>

<!-- contenu mixte -->
<balise1> Ceci est une chaîne de caractère <balise2>20</balise2> 7.5</balise1>

<facture>L'acheteur <acheteur>Brendan L. Mulligan</acheteur>, doit payer la somme de <somme>1000</somme> euros</facture>
<xsd:element name="facture">
    <xsd:complexType mixed="true">
        <xsd:sequence>
            <xsd:sequence>
                <xsd:element name="acheteur" type="xsd:string" />
                <xsd:element name="somme" type="xsd:float" />
            </xsd:sequence>
        </xsd:sequence>
    </xsd:complexType>
</xsd:element>

<!-- nb d'occurences : le nombre minimal et maximal d'occurence -->

<personne type="physique">
    <nom>Robert</nom>
    <prenom>Axel</prenom>
    <prenom>Maurice</prenom>
    <prenom>Marcel</prenom>
</personne>

<xsd:element name="personne">
    <xsd:complexType>
        <xsd:sequence>
            <xsd:element name="nom" type="xsd:string" />
            <!-- on peut écrire de 1 à 3 prénoms -->
            <xsd:element name="prenom" type="xsd:string" 
                minOccurs="1" 
                maxOccurs="3" />
        </xsd:sequence>
        <xsd:attribute name="type" type="string"/>
    </xsd:complexType>
</xsd:element>

<!-- de 0 à x éléments -->
<personne type="physique">
    <nom>Robert</nom>
    <prenom>Axel</prenom>
    <prenom>Maurice</prenom>
    <prenom>Marcel</prenom>
    <prenom>Marcel</prenom>
    <prenom>Marcel</prenom>
</personne>
<xsd:element name="personne">
    <xsd:complexType>
        <xsd:sequence>
            <xsd:element name="nom" type="xsd:string" />
            <!-- on peut écrire de 1 à 3 prénoms -->
            <xsd:element name="prenom" type="xsd:string" 
                minOccurs="0" 
                maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="type" type="string"/>
    </xsd:complexType>
</xsd:element>

<!-- 
    Réutiliser les types
    simplifier l'écriture et la lecture d'un schéma
-->
<banque>
    <!-- 1er client -->
    <client>
        <identite>
            <nom>ADAMS</nom>
            <prenom>Douglas</prenom>
            <adresse>
                <numero>21</numero>
                <voie>Baker Street</voie>
                <codePostal>W1U 8ED</codePostal>
                <ville>Londre</ville>
            </adresse>
        </identite>
        <!-- liste des comptes bancaires du client -->
        <comptes>
            <compteInteret interet="1.5">
                <montant>2500</montant>
            </compteInteret>
            <compte>
                <montant>4200</montant>
            </compte>
        </comptes>
    </client>
</banque>

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <xsd:element name="banque">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="client" maxOccurs="unbounded">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="identite">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="nom" type="xsd:string" />
                                        <xsd:element name="prenom" type="xsd:string" />
                                        <xsd:element name="adresse">
                                            <xsd:complexType>
                                                <xsd:sequence>
                                                    <xsd:element name="numero" type="xsd:string" />
                                                    <xsd:element name="voie" type="xsd:string" />
                                                    <xsd:element name="codePostal" type="xsd:string" />
                                                    <xsd:element name="ville" type="xsd:string" />
                                                </xsd:sequence>
                                            </xsd:complexType>
                                        </xsd:element>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                            <xsd:element name="comptes">
                                <xsd:complexType>
                                    <xsd:choice>
                                        <xsd:element name="livretA">
                                            <xsd:complexType>
                                                <xsd:sequence>
                                                    <xsd:element name="montant" type="xsd:double" />
                                                </xsd:sequence>
                                                <xsd:attribute name="interet" type="xsd:float"/>
                                            </xsd:complexType>
                                        </xsd:element>
                                        <xsd:element name="courant">
                                            <xsd:complexType>
                                                <xsd:sequence>
                                                    <xsd:element name="montant" type="xsd:double" />
                                                </xsd:sequence>
                                            </xsd:complexType>
                                        </xsd:element>
                                    </xsd:choice>
                                </xsd:complexType>
                            </xsd:element>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
</xsd:schema>

<!-- 
    les xsd devient très difficile à lire (et à écrire !), on peut le découper  
    en morceaux réutilisables pour les appliquer et rendre le xsd plus lisible
    on utilisera le mot-clef ref
-->

<!-- sans ref -->
<xsd:element name="identite">
    <xsd:complexType>
        <xsd:sequence>
            <xsd:element name="nom" type="xsd:string" />
            <xsd:element name="prenom" type="xsd:string" />
        </xsd:sequence>
    </xsd:complexType>
</xsd:element>

<!-- avec la ref -->


<!-- déclaration des éléments en global -->

<xsd:element name="nom" type="xsd:string" />
<xsd:element name="prenom" type="xsd:string" />
<xsd:element name="numero" type="xsd:string" />
<xsd:element name="voie" type="xsd:string" />
<xsd:element name="codePostal" type="xsd:string" />
<xsd:element name="ville" type="xsd:string" />

<!-- groupe des éléments de l'adresse -->
<xsd:group name="grp-adresse">
    <xsd:sequence>
        <xsd:element ref="numero" />
        <xsd:element ref="voie" />
        <xsd:element ref="codePostal" />
        <xsd:element ref="ville" />
    </xsd:sequence>
</xsd:group>

<!-- élément adresse -->
<xsd:element name="adresse">
    <xsd:complexType>
        <xsd:group ref="grp-adresse" />
    </xsd:complexType>
</xsd:element>

<!-- passer le truc en groupe pour l'exemple -->
<xsd:group name="grp-identite">
    <xsd:sequence>
        <xsd:element ref="nom" /><!-- ref à l'élément délcarés en global -->
        <xsd:element ref="prenom" /><!-- ref à l'élément délcarés en global -->
        <xsd:element ref="adresse"/>
    </xsd:sequence>
</xsd:group>

<!-- déclaration de l'élément identité -->
<xsd:element name="identite">
    <xsd:complexType>
        <xsd:group ref="grp-identite" />
    </xsd:complexType>
</xsd:element>

<!-- 
on peut créer ses propres types car ici, livret A et compte courant ont le même format 
on déclare donc ses propre types
ex déclaration d'un type simple
____________________________________
<xsd:simpleType name="mon_type_perso">
    <xsd:restriction base="mon_type_perso">
        ...
    </xsd:restriction>
</xsd:simpleType>

utilisation du type simple
____________________________________
<xsd:element name="mon_nom" type="mon_type_perso" />


déclaration type complexe
____________________________________
<xsd:complexType name="mon_type_perso">

</xsd:complexType>

utilisation du type complexe
____________________________________
<xsd:element name="mon_nom" type="mon_type_perso" />
-->

<!-- création d'un type compte général -->
<xsd:element name="montant" type="xsd:double" />

<xsd:complexType name="compte">
    <xsd:sequence>
        <xsd:element ref="montant" />
    </xsd:sequence>
</xsd:complexType>

<!-- extension du type compte courant en compte avec intérêts -->
<xsd:complexType name="compteInteret">
    <xsd:complexContent>
        <xsd:extension base="compte">
            <xsd:attribute name="interet" type="xsd:float" />
        </xsd:extension>
    </xsd:complexContent>
</xsd:complexTypeom>

<!-- utilisation des types créés pour la déclaration de comptes -->
<xsd:element name="comptes">
    <xsd:complexType>
        <xsd:choice>
            <xsd:element name="livretA" type="compteInteret" />
            <xsd:element name="courant" type="compte" />
        </xsd:choice>
    </xsd:complexType>
</xsd:element>

<!-- declaration de la partie client qui contient les autre parties déjà déclarées -->
<xsd:element name="client">
    <xsd:complexType>
        <xsd:sequence>
            <xsd:element ref="identite" />
            <xsd:element ref="comptes" />
        </xsd:sequence>
    </xsd:complexType>
</xsd:element>

<!-- utilisation dans le schéma finald de tous les éléments déclarés -->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <xsd:element name="banque">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="client" maxOccurs="unbounded" />
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
</xsd:schema>

<!-- 
    Créer ses propres types (comme compte et compteInteret ) 
    Deux façons de créer ses propres types : 
        - par Extension
        - par restriction
-->

<!-- héritage par restriction -->
<!-- pour un élément -->

<xsd:element name="mon_nom">
    <xsd:simpleType>
        <xsd:restriction base="type_de_base">
            <!-- détail de la restriction -->
        </xsd:restriction>
    </xsd:simpleType>
</xsd:element>

<!-- pour un attribut -->

<xsd:attribute name="mon_nom">
    <xsd:simpleType>
        <xsd:restriction base="type_de_base">
            <!-- détail de la restriction -->
        </xsd:restriction>
    </xsd:simpleType>
</xsd:attribute>

<!-- type_de_base indique le type de valeur pour la restriction utilisée pour l'héritage -->

<!-- exemple avec minExclusive -->
<!-- syntaxe sur une élément -->
<xsd:element name="mon_nom">
    <xsd:simpleType>
        <xsd:restriction base="type_de_base">
            <xsd:minExclusive value="valeur" />
        </xsd:restriction>
    </xsd:simpleType>
</xsd:element>

<!-- syntaxe sur un attribut dans un élément -->
<xsd:element name="mon_age">
    <xsd:complexType>
        <!-- en appliquant le type de restriction -->
        <xsd:attribute name="attribut-age">
            <xsd:simpleType>
                <xsd:restriction base="type simple de valeur dans l'attribut">
                    <xsd:minExclusive value="la valeur minimale exclue dans l'attribut" />
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
    </xsd:complexType>
</xsd:element>
<!-- 
    exemple : la balise personne possède un attribut age, dont la valeur doit être entière et  strictement supérieur à 17 
-->
<xsd:element name="personne">
    <xsd:complexType>
        <!-- en appliquant le type de restriction -->
        <xsd:attribute name="age">
            <xsd:simpleType>
                <xsd:restriction base="xsd:nonNegativeInteger">
                    <xsd:minExclusive value="17" />
                    <xsd:maxExclusive value="80" />
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
    </xsd:complexType>
</xsd:element>

<!-- valide -->
<personne age="18" />
<!-- valide -->
<personne age="43" />
<!-- invalide -->
<personne age="17" />
<!-- invalide -->
<personne age="80" />

<!-- les restrictions s'appliquent de la même manière pour :  
    minExclusive    permet de définir une valeur minimale exclusive
    minInclusive    permet de définir une valeur minimale inclusive
    maxExclusive    permet de définir une valeur maximale exclusive
    maxInclusive    permet de définir une valeur maximale inclusive
    totalDigits     permet de définir le nombre exact de chiffres qui composent un nombre
    fractionDigits  permet de définir le nombre de chiffres autorisés après la virgule
    length          permet de définir le nombre exact de caractères d'une chaîne
    minLength       permet de définir le nombre minimum de caractères d'une chaîne
    maxLength       permet de définir le nombre maximum de caractères d'une chaîne
-->

<!-- enumération : permet d'énumérer la liste des valeurs possibles -->
<!-- valide -->
<personne type="physique">
    <!-- d'autres balises -->
</personne>
<!-- valide -->
<personne type="morale">
    <!-- d'autres balises -->
</personne>
<!-- invalide -->
<personne type="truc">
    <!-- d'autres balises -->
</personne>
<!-- l'attribut type de personne ne doit avoir comme résultat que physique ou morale, rien d'autre -->
<xsd:element name="personne">
    <xsd:complexType>
        <!-- définition des balises à l'intérieur de personne -->
        <!-- restriction de l'attribut type de personne -->
        <xsd:attribute name="type">
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="physique" />
                    <xsd:enumeration value="morale" />
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
    </xsd:complexType>
</xsd:element>

<!-- 
    whitespace : permet de transformer et gérer les espaces (tabulation, retour à la ligne, espaces simples)  
    dans une balise ou un attribut
    preserve : garde les espaces dans la donnée
    Replace : remplace tous les espaces par des espaces simples (si espace, tab et retour chariot sont présent, remplacés par trois espaces)
    Collapse : remplace tous les espaces par un seul espace simple (si espace, tab et retour chariot sont présent, remplacés par un seul espace)
-->
<nom>Gerald     Mandfroid
</nom>
<xsd:element name="nom">
    <xsd:simpleType>
        <xsd:restriction base="xsd:string">
            <xsd:whiteSpace value="collapse" />
        </xsd:restriction>
    </xsd:simpleType>
</xsd:element>

<!-- la donnée dans <nom> sera lue: <nom>Gerald Manfroid</nom> -->

<!-- 
    pattern : détermine un motif de données auquel la valeur de la balise ou de l'attribut 
    doit correspondre pour être valide 
-->
<xsd:element name="emailAddress">
    <xs:simpleType>
        <xs:restriction base="xs:token">
            <xs:maxLength value="254"/>
            <xs:pattern value="[_\-a-zA-Z0-9\.\+]+@[a-zA-Z0-9](\.?[\-a-zA-Z0-9]*[a-zA-Z0-9])*"/>
        </xs:restriction>
    </xs:simpleType>
</xsd:element>

<!-- forcer la première lettre en majuscule et les autres en minuscules ="[A-Z][a-z]+" -->

<!-- 
    Héritage par extension 
    Permet de créer des type de données réutilisables, 
    et aussi de créer des types étendus qui changent très peu d'un type de base
-->

<courant>
    <montant>2500</montant>
</courant>
<livretA interet="1.5">
    <montant>7000</montant>
</livretA>

<!-- utiliser l'héritage par extension pour déclarer un type de compte compte courant et compte avec intérêts -->

<xsd:element name="montant" type="xsd:double" />

<!-- on crée un type compte de base qui s'appliquera quand un compte ne rapporte pas d'intérêt -->
<xsd:complexType name="compte">
    <xsd:sequence>
        <xsd:element ref="montant"/>
    </xsd:sequence>
</xsd:complexType>

<!-- pour définir la partie compte courant du xml -->
<xsd:element name="courant" type="compte" />

<!-- on crée le type de compte étendu pour livretA, ce type de compte possède un attribut intéret -->
<xsd:complexType name="compteInteret">
    <xsd:complexContent>
        <xsd:extension base="compte">
            <xsd:attribute name="interet" type="xsd:float"/>
        </xsd:extension>
    </xsd:complexContent>
</xsd:complexType>

<!-- pour définir la partie livretA courant du xml -->
<xsd:element name="livretA" type="compteInteret" />

<!-- 
    Les identifiants Key et keyRef 
    Permet d'identifier et de référencer les ressopurces dans un schéma XML en étant plus précis qu'en utilisant
    ID et IDREF
-->
<!-- 
    Key 
    un élément composé d'un selector avec l'attribut xpath
    xpath est le chemin dans l'arbre du xml pour référencer un ou plusieurs autres éléments field
    qui possèdnet au aussi une expression xpath qui indique l'attribut qui servira d'identifiant
-->

<xsd:key name="nom_identifiant_la_clef">
    <xsd:selector xpath="expression xpath" />
    <!-- les champs field concernés par la clef -->
    <xsd:field xpath="expression xpath" />
</xsd:key>

<!-- 
    Keyref (construction similaire à key)
    un élément composé d'un selector avec l'attribut xpath
    xpath est le chemin dans l'arbre du xml qui permet de référencer 
    l'élément visé et un ou plusieurs autres éléments field
    qui possèdent au aussi une expression xpath qui indique l'attribut qui servira d'identifiant
-->

<xsd:keyref name="nom_identifiant_la_clef_ref">
    <xsd:selector xpath="expression xpath" />
    <!-- les champs field concernés par la clef -->
    <xsd:field xpath="expression xpath" />
</xsd:keyref>

<!-- avec le xml suivant -->
<famille>
    <parent id="PER-1" />
    <enfant id="PER-2" parent="PER-1" />
</famille>

<!--
    La famille possède deux élément, un parent et un enfant, avec chacun un attribut unique id
    l'enfant possède en plus un attribut parent contenant l'id de son parent
-->
<!-- xsd sans les identifiants -->
<!-- parent -->
<xsd:element name="parent">
    <xsd:complexType>
        <xsd:attribute name="id" type="xsd:NCName" />
    </xsd:complexType>
</xsd:element>
<!-- enfant -->
<xsd:element name="enfant">
    <xsd:complexType>
        <xsd:attribute name="id" type="xsd:NCName" />
        <xsd:attribute name="parent" type="xsd:NCName" />
    </xsd:complexType>
</xsd:element>
<!--  xsd de famille -->
<xsd:element name="famille">
    <xsd:complexType>
        <xsd:sequence>
            <xsd:element ref="parent" />
            <xsd:element ref="enfant" />
        </xsd:sequence>
    </xsd:complexType>
</xsd:element>

<!-- en utilisant key et keyref -->
<!-- ajout de l'identifiant du parent -->
<xsd:key name="parentId">
    <xsd:selector xpath="/parent" />
    <!-- les champs (attribut de la balise déterminée dans le selector) field concernés par la clef -->
    <xsd:field xpath="@id" />
</xsd:key>

<!-- ajout de l'identifiant de l'enfant -->
<xsd:key name="enfantId">
    <xsd:selector xpath="/enfant" />
    <!-- les champs (attribut de la balise déterminée dans le selector) field concernés par la clef -->
    <xsd:field xpath="@id" />
</xsd:key>

<!-- faire le lien entre @id d'un parent et l'attribut parent d'un enfant -->
<xsd:keyref name="parentIdRef" refer="parentId">
    <xsd:selector xpath="/enfant" />
    <xsd:field xpath="@parent" />
</xsd:keyref>

<!-- autre exemple -->
<racine>
    <page numero="4" langue="US">
    <titre>XML Schema Part 2: Datatypes</titre>
    <lien>http://www.w3.org/TR/2001/REC-xmlschema-2-20010502/</lien>
    <commentaire>
      XML Schema: Datatypes is part 2 of the specification of the XML
      ...
    <cle_site>1</cle_site>
  </page>
  <site numero="1">
    <nom>W3C</nom>
    <url>http://www.w3.org/</url>
  </site>
  <site numero="2">
    <nom>XMLfr</nom>
    <url>http://www.xmlfr.org/</url>
  </site>
</racine>

<xsd:element name="site" 
                    maxOccurs="unbounded" 
                    type="type_site">
    <xsd:key name="num_site">
        <xsd:selector xpath=".//site"/>
        <xsd:field xpath="./@numero"/>
    </xsd:key>
    <xsd:keyref name="cle_site" refer="num_site">
        <xsd:selector xpath=".//page"/>
        <xsd:field xpath="./cle_site"/>
    </xsd:keyref>
</xsd:element>