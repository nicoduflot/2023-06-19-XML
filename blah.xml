<html:html 
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:mml="http://www.w3.org/1998/Math/MathML"
    >
    <html:head>
        <html:title>Espaces de noms</html:title>
    </html:head>
    <html:body>
        ...
        <mml:math>
            <mml:apply>
                <mml:eq>
                    ....
                </mml:eq>
            </mml:apply>
        </mml:math>
    </html:body>
</html:html>

<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Espaces de noms</title>
    </head>
    <body>
        ...
        <math xmlns="http://www.w3.org/1998/Math/MathML">
            <apply>
                <eq>
                    ....
                </eq>
            </apply>
        </math>
    </body>
</html>

<html xmlns="http://www.w3.org/1999/xhtml">
    <!-- L'espace de nom réfère maintenant au vocabulaire XHTML -->
    <head>
        <title>Espaces de noms</title>
    </head>
    <body>
        ...
        <name xmlns="">
        <!-- 
            en déclarant l'attribut xmlns pour la balise name à 'vide' name et les balises qu'il contient ne se réfèreront plus au vocabulaire XHTML 
        -->
            <firstName>Gaston</firstName>
            <lastName>Lagaffe</lastName>
        </name>
    </body>
</html>

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE list SYSTEM "valide.dtd">
<tns:list xmlns:tns="http://www.omega-one.org/~carton/">
    <tns:item>Item 1</tns:item>
    <tns:item>Item 2</tns:item>
</tns:list>

<!-- valide.dtd -->
<!ELEMENT tns:list (tns:item+) >
<!ATTLIST tns:list xlmns:tns CDATA #REQUIRED>
    <!ELEMENT tns:item (#PCDATA)>

<!-- 
XML
    http://www.w3.org/XML/1998/namespace 
XInclude
    http://www.w3.org/2001/XInclude 
XLink
    http://www.w3.org/1999/xlink 
MathML
    http://www.w3.org/1998/Math/MathML 
XHTML
    http://www.w3.org/1999/xhtml 
SVG
    http://www.w3.org/2000/svg 
Schémas
    http://www.w3.org/2001/XMLSchema 
Instances de schémas
    http://www.w3.org/2001/XMLSchema-instance 
Schematron
    http://purl.oclc.org/dsdl/schematron 
XSLT
    http://www.w3.org/1999/XSL/Transform 
XSL-FO
    http://www.w3.org/1999/XSL/Format 
DocBook
    http://docbook.org/ns/docbook 
Dublin Core
    http://purl.org/dc/elements/1.1/ 


-->

<!-- 
    Les DTD  
    Document Type Definition
-->
<!-- Syntaxe -->
<!ELEMENT balise (contenu)>
<contact>
    <nom>Durand</nom>
</contact>
<!-- balise contenant une autre balise -->
<!ELEMENT contact (nom)>
<!-- pour la balise nom -->
<!ELEMENT nom (#PCDATA)>
<!-- si la balise est vide de données -->
<!ELEMENT nom EMPTY>
<!-- exemple -->
<console src="test" />
<!ELEMENT console EMPTY>
    <!ATTLIST console src CDATA>
<!-- Si la balise peut contenir des données ou non -->
<!ELEMENT nom ANY>
<!-- Pour le xml suivant : -->
<rolodex>
    <contact>
        <nom>Durand</nom>
        <prenom>Jean</prenom>
        <age>42</age>
    </contact>
    <contact>
        <nom>ACME Inc.</nom>
        <prenom></prenom>
        <age></age>
    </contact>
</rolodex>

<!ELEMENT rolodex (contact+)>
    <!ELEMENT contact (nom, prenom, age)>
        <!ELEMENT nom (#PCDATA)>
        <!ELEMENT prenom (#PCDATA)>
        <!ELEMENT age (#PCDATA)>

<!-- IL est possible d'avoir plusieurs contenus possible dans une balise, avec une liste de choix -->

<!ELEMENT rolodex (contact+)>
    <!ELEMENT contact (nom | prenom, age)>
        <!-- ici le xml doit avoir obligatoirement soit nom soit prénom et age -->
        <!ELEMENT nom (#PCDATA)>
        <!ELEMENT prenom (#PCDATA)>
        <!ELEMENT age (#PCDATA)>

<!-- Balises optionnelles -->
<!ELEMENT contact (nom, prenom?, adresses, emails)>
<!-- contact doit contenir une balise nom, peut ou non contenir une balise prenom, et doit contenir une balise adresses etemails -->

<!-- Balises opitionnelles répétées -->
<!ELEMENT adresses (adresse*)>
<!-- mon élément adresses peut contenir 0 ou plusieurs élément adresse -->
<!-- Balises obligatoires répétées-->
<!ELEMENT rolodex (contact+)>
<!-- L'élément rolodex doit contenir au moins un ou plus d'élément contact -->

<!-- Les attributs -->
<!ELEMENT balise (contenu)>
    <!ATTLIST balise attr >

<!-- Identifiant unique -->
<!ATTLIST contact numero ID #REQUIRED>
<!-- Balise contact possède un attribut ID qui doit être unique et obligatoire -->
<contact numero="n1"></contact>
<!-- 
    propriété de présence des attributs 
    Forme                   Signification
    #IMPLIED                Attribut Facultatif
    #REQUIRED               Attribut obligatoire
    #FIXED "valeur"         Attribut avec cette valeur, non modifiable
    "valeur"                Attribut a cette valeur par défaut et elle est modifible
-->

<!-- Attribut ayant pour référence (qui fait référence à) un attribut à valeur unique -->
<contact personne="physique" numero="n1"></contact>
    <!ATTLIST contact numero ID #REQUIRED>

<adresse userAdresse="n1"></adresse>
    <!ATTLIST adresse userAdresse IDREF #REQUIRED>

<!-- attribut avec une valeur par défaut -->
<!ATTLIST contact personne (physique | morale) "physique" >
<!-- valide -->
<contact personne="physique"></contact>
<!-- valide -->
<contact personne="morale"></contact>
<!-- invalide -->
<contact personne="toto"></contact>
<!-- valide mais par défaut considéré comme physique -->
<contact personne=""></contact>

<!-- 
    les constantes : si un attribut est présent dans la balise, il doit avoir la valeur définie.
    mais si l'attribut n'est pas présent, il aura par défaut la valeur de la constante
-->

<!ATTLIST prix devise CDATA "euro">
<prix devise="euro">12</prix>
<prix>12</prix>
<!-- ici la devise sera euro et rien d'autre -->

<prix devise="USD">12</prix> <!-- invalide -->

<!-- 
    Les entités 
    se sont des alias qui permettent de réutiliser des informations dans le document xml ou dans les DTD
        - générales
        - paramètres
        - externes
-->

<!-- 
    entité générale 
    associe une alias a une information dans le document
-->

<!ENTITY dacia "Dacia">
<!ENTITY renault "Renault">
<!ENTITY citroen "Citroën">

<voiture>
    <marque>&dacia</marque>
</voiture>
<voiture>
    <marque>&renault</marque>
</voiture>
<voiture>
    <marque>&citroen</marque>
</voiture>

<!-- le xml sera lu en équivalent -->
<voiture>
    <marque>Dacia</marque>
</voiture>
<voiture>
    <marque>Renault</marque>
</voiture>
<voiture>
    <marque>Citroën</marque>
</voiture>

<!-- 
    entité paramètre 
    N'apparaissent que dans les DTD
    Elles associent un alias à une partie de la déclaration dans les DTD
-->
<voiture marque="Dacia" />
<voiture marque="Renault" />
<voiture marque="Citroën" />
<!-- pour l'attribut marque -->
<!ATTLIST voiture marque (Dacia|Renault|Citroën) #REQUIRED>

<!-- Avec les entités -->
<!ENTITY % listeMarques "marque (Dacia|Renault|Citroën) #REQUIRED">
<!ATTLIST voiture %listeMarques>

<!-- 
    Entité externe 
    Permetttent de faire référence, comme les entités générales, à des informations a utiliser dans le document 
    xml, mais elle sont écrites et déclarées dans un fichier externe
-->

<!ENTITY dacia SYSTEM "dacia.xml">
<!ENTITY renault SYSTEM "renault.xml">
<!ENTITY citroen SYSTEM "citroen.xml">

<!-- voitures.xml -->
<voiture>
    &dacia
</voiture>
<voiture>
    &renault
</voiture>
<voiture>
    &citroen
</voiture>

<!-- dacia.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE marque[
    <!ELEMENT marque (#PCDATA)>
]>
<marque>Dacia</marque>

<!-- 
    Les Schémas XML (XSD) 
    Pourquoi ? 
    les DTD ne sont pas au format XML, c'est un nouveau langage avec sa propre syntaxe et ses règles.
    => il faut l'utiliser avec xml et il se peut que certaines API liront le XML et les DTD de façons différentes?
    Enfin, on ne peut pas typer les données, on indique juste qu'une balise contient ou non des données mais impossible de préciser si c'est une chaîne de caractère, un nombre, etc.
    
    Le xsd permet de typer les donnée, il est plus précis sur l'écriture des contraintes, il s'écrit en xml, 
    se stocke dans un fichier externe ayant l'extension .xsd, il utilise comme les fichiers xml un prologue 
    dont le nom de l'élément racine nous est imposé
-->

<!-- prologue d'un fichier .xsd -->
<?xml version="1.0" encoding="UTF-8"?>
<!-- élément racine -->
<xsd:schema xmlns="http://www.w3.org/2001/XMLSchema">
</xsd:schema>

<!-- on déclare un espace de nom avec xmlns:xsd, de fait, tous les éléments du xsd seront préfixés par xsd: -->

<!-- 
    il faut ensuite rattacher ce fichier de schéma au xml concerné par le xsd
    il faut déclarer l'attachement du fichier dans la balise racine du xml
    mais pour appeler ce fichier il faut utiliser le vocabulaire schema-instance


-->

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<agenda xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:Contact test.xsd" xsi:schemaLocation="urn:Voiture testVoiture.xsd">
    <!-- schemaLocation déclare un xsd décrivant un espace de nom -->
    <Contact:rolodex xmlns:Contact="urn:Contact">
        <Contact:nom>
            Durant
        </Contact:nom>²²²
    </Contact:rolodex>
    <Voiture:garage xmlns:Voiture="urn:Voiture">
        <Voiture:voiture>
            <Voiture:marque>
                Opel
            </Voiture:marque>
        </Voiture:voiture>
    </Voiture:garage>
</agenda>

<!-- xsd ne décrivant pas d'espace de nom -->
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<agenda xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="test-et-testVoiture.xsd">
    <!-- schemaLocation déclare un xsd ne décrivant pas un espace de nom -->
    <rolodex>
        <nom>
            Durant
        </nom>
    </rolodex>
    <garage>
        <voiture>
            <marque>
                Opel
            </marque>
        </voiture>
    </garage>
</agenda>

<!--
    Déclarations d'éléments
    Éléments simples : un élément qui ne contient qu'une valeur dont le type est dit simple, il ne contient pas d'autres éléments

    une balise sans attribut, un attribut est un élément simple si le type de donnée qu'il contient est simple
-->
<!-- Ni attribut, ni aucun autre élément et donnée de type simple => élément simple -->
<nom>Duflot</nom>

<!-- Contient un attribut => élément complexe -->
<!-- l'attribut type est lui un élément simple -->
<personne type="physique">Nicolas Duflot</personne>

<!-- Élément complexe (contient d'autres balises) -->
<personne>
    <!-- Élement complexe (contient un attribut)-->
    <nom type="usage">Duflot</nom>
    <!-- Élement complexe (contient un attribut)-->
    <nom type="jeune-fille">Duflot</nom>
    <!-- Élement simple ( ne contient ni attribut ni d'autres balises )-->
    <prenom>Tiphaine</prenom>
</personne>

<!-- 
    Déclarer une balise en élément simple 
    mot clef : element sans oublier le namespace xsd:
-->
<nom>Duflot</nom>
<prenom>Nicolas</prenom>
<age>43</age>

<!-- en xsd -->
<xsd:element name="nom" type="xsd:string" />
<xsd:element name="prenom" type="xsd:string" />
<xsd:element name="age" type="xsd:int" />

<!-- valeurs parr défaut -->
<xsd:element name="nom" type="xsd:string" default="Doe" />
<xsd:element name="prenom" type="xsd:string" default="John" />
<xsd:element name="age" type="xsd:int" />
<!-- des exemples de xml valides avec ce schéma -->
<!-- ex 1 -->
<nom>Duflot</nom>
<prenom>Nicolas</prenom>
<age>43</age>
<!-- ex 2 -->
<nom></nom><!-- valeur par défaut "Doe"-->
<prenom>Nicolas</prenom>
<age>43</age>
<!-- ex 3 -->
<nom>Duflot</nom>
<prenom></prenom><!-- valeur par défaut "john"-->
<age>43</age>
<!-- ex 4 -->
<nom>Duflot</nom>
<prenom>Nicolas</prenom>
<age></age> <!-- il n'y a pas de valeur par défaut pour l'age mais il n'est pas obligatoire -->

<!-- 
    valeurs contantes 
    valeur inchangeable, imposée et non valide si la balise est vide
-->
<xsd:element name="status" type="xsd:string" fixed="Employé·e" />
<!-- valide -->
<status>Employé·e</status>
<!-- invalide car valeur !== Employé·e -->
<status>Junior</status>
<!-- invalide parce que value === '' -->
<status></status>

<!-- 
    Les attributs  
    
    Les attributs sont donc par essence des éléments simple, mais pour les déclarer 
    nous n’utilisons pas le mot-clef element mais le mot clef attribute, 
    qui sera évidemment précédé du namespace xsd:
    
    La déclaration d’un attribut possède deux attributs, nom et type (name & type)
-->

<!-- Déclaration de l'attribut personne de la balise suivante -->
<personne type="physique"></personne>

<xsd:attribute name="type" type="xsd:string" />
<!-- mais personne est un élément complexe, nous verrons sa déclaration un peu plus tard -->

<!-- Valeurs par défaut, obligatoire et inchangeables -->
<!-- par défaut -->
<xsd:attribute name="type" type="xsd:string" default="physique" />
<!-- Constante -->
<prix devise="euro">23.5</prix>
<xsd:attribute name="devise" type="xsd:string" fixed="euro" />

<!-- l'attribut type de personne doit être présent dans la balise -->
<xsd:attribute name="type" type="xsd:string" use="required" />
<!-- valide -->
<personne type="physique"></personne>
<!-- invalide -->
<personne type=""></personne>
